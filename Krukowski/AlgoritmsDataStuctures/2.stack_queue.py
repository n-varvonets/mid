def find_unmatched_brackets(expression):
    stack = []
    brackets = {')': '(', '}': '{', ']': '['}
    unmatched_closing = []

    for i, char in enumerate(expression):
        if char in brackets.values():
            stack.append((char, i))
        elif char in brackets:
            if stack and stack[-1][0] == brackets[char]:
                stack.pop()
            else:
                unmatched_closing.append((char, i))

    results = []
    if stack:
        unmatched_opening = ', '.join([f"'{char}' at position {pos}" for char, pos in stack])
        results.append(f"Unmatched opening brackets: {unmatched_opening}")
    if unmatched_closing:
        unmatched_closing_brackets = ', '.join([f"'{char}' at position {pos}" for char, pos in unmatched_closing])
        results.append(f"Unmatched closing brackets: {unmatched_closing_brackets}")

    if results:
        return " | ".join(results)

    return "All brackets are matched correctly"


expression = "Demo internal {demo2 [invalid])"
result = find_unmatched_brackets(expression)
print(result)

################################################################################################
from collections import deque


class PrinterQueue:
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º deque –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é.
        # —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏, —ç—Ç–æ –±—É–¥–µ—Ç –º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.
        # –ú–µ—Ç–æ–¥ popleft –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –Ω–∞—á–∞–ª–∞ –æ—á–µ—Ä–µ–¥–∏. –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –≤—Ä–µ–º—è ùëÇ(1)
        self.queue = deque()

    def add_job(self, job):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏"""
        self.queue.append(job)
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {job}")

    def print_job(self):
        """–†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥–∏"""
        if self.queue:

            job = self.queue.popleft()
            print(f"–ü–µ—á–∞—Ç—å –∑–∞–¥–∞—á–∏: {job}")
        else:
            print("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø–µ—á–∞—Ç–∏.")

    def show_queue(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏"""
        if self.queue:
            print("–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏:", list(self.queue))
        else:
            print("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
printer_queue = PrinterQueue()

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏
printer_queue.add_job("–î–æ–∫—É–º–µ–Ω—Ç 1")
printer_queue.add_job("–î–æ–∫—É–º–µ–Ω—Ç 2")
printer_queue.add_job("–î–æ–∫—É–º–µ–Ω—Ç 3")

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏
printer_queue.show_queue()

# –ü–µ—á–∞—Ç—å –∑–∞–¥–∞—á
printer_queue.print_job()  # –ü–µ—á–∞—Ç–∞–µ—Ç "–î–æ–∫—É–º–µ–Ω—Ç 1"
printer_queue.print_job()  # –ü–µ—á–∞—Ç–∞–µ—Ç "–î–æ–∫—É–º–µ–Ω—Ç 2"

# –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
printer_queue.show_queue()

# –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–¥–∞—á—É
printer_queue.add_job("–î–æ–∫—É–º–µ–Ω—Ç 4")

# –ü–µ—á–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
printer_queue.print_job()  # –ü–µ—á–∞—Ç–∞–µ—Ç "–î–æ–∫—É–º–µ–Ω—Ç 3"
printer_queue.print_job()  # –ü–µ—á–∞—Ç–∞–µ—Ç "–î–æ–∫—É–º–µ–Ω—Ç 4"
printer_queue.print_job()  # –°–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
