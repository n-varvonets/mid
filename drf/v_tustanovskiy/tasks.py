################################ hash ################################

a = 256
b = 256
print(a is b)  # True, так как числа от -5 до 256 кэшируются, и a и b ссылаются на один и тот же объект.

a1 = 2572
b1 = 2572
print(a1 is b1)  # False, числа вне диапазона кэширования создают новые объекты в памяти, поэтому a1 и b1 ссылаются на разные объекты.

a2 = hash(256)
b2 = hash(256)
print(a2 is b2)  # True, результат hash(256) равен 256, а числа до 256 кэшируются, поэтому a2 и b2 ссылаются на один и тот же объект.
print(a2)  # 256
print(b2)  # 256

a3 = hash(257)
b3 = hash(257)
print(a3 is b3)  # False, результат hash(257) равен 257, но числа больше 256 не кэшируются, поэтому a3 и b3 — разные объекты.
print(a3)  # 257
print(b3)  # 257

################################ map ################################
# map - однопроходный генератор

data = map(abs, [1, 2, -3, -4, 5, 9])

print(4 in data)  # True
print(5 in data)  # True
print(2 in data)  # False - т.к. map - однопроходный генератор


################################ range ################################
# Объект `range` **не является итератором**, но он **является итерируемым объектом**.
# - НЕ ХРАНИТ ОБЬЕКТЫ в паямти(КАК ГЕНЕРАТОРЫ)...только первое и последнее значение + шаг
# Это означает, что его можно использовать в циклах, и он поддерживает **доступ по индексу**, как списки или кортежи.

### 1 Пример доступа по индексу:
r = range(10)  # range от 0 до 9
print(r[0])  # Выведет: 0
print(r[5])  # Выведет: 5
print(r[-1])  # Выведет: 9 (обратный доступ)

### 2 Пример доступа по индексу:
r = range(1, 10, 2)  # range от 1 до 9 с шагом 2
print(r[2])  # Выведет: 5
print(list(r))  # Преобразуем в список: [1, 3, 5, 7, 9]
