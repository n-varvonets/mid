# чему равно алгоритмическая сложность? Можно ее улучшить?

n = int(input())

result = 0
for i in range(n):
    for j in range(2*n):
        result += j + i

print(result)


### ----------------------- алгоритмическая сложность ------------------------- ###
# Один цикл
n = int(input())

result = 0
for i in range(n):
    result += i

print("Один цикл: Временная сложность O(n)")

# Три цикла
n = int(input())

result = 0
for i in range(n):
    for j in range(n):
        for k in range(n):
            result += i + j + k

print("Три цикла: Временная сложность O(n^3)")


### ----------------------- вариант1 улучшить Временная сложность: O(1 ------------------------- ###

n = int(input())

# Вычисляем сумму j
sum_j = (2 * n) * (2 * n - 1) // 2

# Вычисляем сумму i
sum_i = n * (n - 1) // 2

# Итоговый результат
result = n * sum_j + sum_i

print(result)

### ----------------------- вариант2 улучшить - Временная сложность: O(n) ------------------------- ###


def compute_result(n):
    result = 0
    for i in range(n):
        result += n * (2 * n - 1) + (2 * (n * i))
    return result

n = int(input())
print(compute_result(n))


### ----------------------- формула Гаусса ------------------------- ###

def sum_arithmetic_sequence(a1, an, n):
    """
    Вычисляет сумму первых n членов арифметической последовательности.

    формула используется для нахождения суммы легко в арифметической последовательности?

    первое и последнее число он складывал и каждый раз получал одно и то же

    :param a1: Первый член последовательности
    :param an: Последний член последовательности
    :param n: Количество членов
    :return: Сумма первых n членов
    """
    return (n * (a1 + an)) // 2

# Пример использования
a1 = 1
an = 10
n = 10

result = sum_arithmetic_sequence(a1, an, n)
print(result)  # Output: 55


# как дойти до формулы
r = 0
for i in range(50):
    r += i
print(r)  # 1225 - искомое значение суммы

print(50*25)  # 1275 методом подобра - не наше число суммы
print(51*25)  # 1250 методом подобра - не наше число суммы
print(49*25)  # 1225 методом подобра -  НАШЕ искомое число суммы

# (n - 1) * n // 2


