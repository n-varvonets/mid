import numpy as np

data = np.empty([100, 28, 28])  # data содержит 1000 картинок с размером  28 на 28
arr_1 = np.empty([50, 28, 28])  # arr_1 содержит 50 картинок с размером  28 на 28
arr_2 = np.empty([28, 28])  # arr_2 содержит 1 картинку с размером  28 на 28

print(f"data содержит 1000 картинок с размером  28 на 28: {data.shape}")
print(f"arr_1 содержит 50 картинок с размером  28 на 28: {arr_1.shape}")
print(f"arr_2 содержит 1 картинку с размером  28 на 28: {arr_2.shape}")

###########################################################
###### Добавление в массивов новых елементов append ####### append - создает копию массива, что тратить память и долго, но уникально
###########################################################

new_data = np.append(data, arr_1)  # где,
# data - 1ый массив в которой добавляем,
# arr_1 массив что добавляем,
# axis - если не указать ось, то полуим одномерный массив
new_data_1 = np.append(data, arr_1, axis=0)  # к 1000 картинкам добавляем наши 50ть картинок
new_data_2 = np.append(arr_1,
                       arr_1,
                       axis=2
                       )  # arr_1 добавим к самому себе по второй(последней) оси, что б увеличить кол-во елементов(шариков) вдвое
new_data_2_1 = np.append(arr_1, arr_1, axis=0)  # по подобию, только уже для 0 оси
new_data_3 = np.append(data,
                       arr_2[np.newaxis],
                       axis=0
                       )  # т.к. всего два елемента([28, 28]), то при помощи np.newaxis добавим нулевую ось(с самого лева)

print(f"new_data.shape={new_data.shape}")
print(f"new_data_1.shape={new_data_1.shape}")
print(f"new_data_2.shape={new_data_2.shape}")
print(f"new_data_2_1.shape={new_data_2_1.shape}")
print(f"new_data_3.shape={new_data_3.shape}")
# new_data.shape=(117600,)
# new_data_1.shape=(150, 28, 28)
# new_data_2.shape=(50, 28, 56) # кол-во елементов(шариков) увелеичилось вдвое из-за axis=2
# new_data_2_1.shape=(100, 28, 28)   # кол-во елементов(полок) увелеичилось вдвое из-за axis=0
# new_data_3.shape=(101, 28, 28)  # как результат 101 картинка, а было 100


###########################################################
###### Удалить в массиве елементы по индексу delete #######
###########################################################

new_data_5 = np.delete(new_data_1, 100, axis=0)  # удаляем 100ый елемент по индексу
print(f"new_data_5.shape after deletion={new_data_5.shape}")  # (150, 28, 28) = new_data_1
# new_data_5.shape after deletion=(149, 28, 28) - т.к. 150-1=149

##############################################################################################
###### Ускорение добавления елемента в массив с кастомной логикой по каждому елементу  #######  append - создает копию массива, что тратить память и долго, но уникально
##############################################################################################
import time

# Например, имеем датасет с 1000 картинок размером 28x28
img_dataset = np.empty([1000, 28, 28])
# в этот массив нужно добавить еще 1000 елементов. Откуда они берутся - неважно


# ---------------------------- Реализация 1 - неправильная и долгая(C append) -----------------------------------------
# for i in range(1000):
#     # имтируем получение картинки ПОСЛЕДОВАТЕЛЬНО
#     img = np.random.randint(0, 255, 28 * 28).reshape([28, 28])  # формируется новая картинка 28х28
#     arr_6 = np.append(img_dataset, img[np.newaxis],
#                       axis=0)  # добавляем в 0 ось(самую верхнюю) картинку, предварительно добавив нулевую ось
#
# print(arr_6.shape)  # (1001, 28, 28)
# # т.к. добавление картинок в массив img_dataset, но img_dataset не обновляется в цикле.
# # Каждая новая картинка добавляется только в временный массив arr_6, который создаётся заново на каждой итерации.


# ---------------------------- Реализация 2 -   валидная, но долгая(C append)  -----------------------------------------
# for i in range(1000):
#     # имтируем получение картинки ПОСЛЕДОВАТЕЛЬНО
#     img = np.random.randint(0, 255, 28 * 28).reshape([28, 28])  # формируется новая картинка 28х28
#     img_dataset  = np.append(img_dataset, img[np.newaxis],
#                       axis=0)  # добавляем в 0 ось(самую верхнюю) картинку, предварительно добавив нулевую ось
#
# print(img_dataset .shape)  # (2000, 28, 28)
# # т.к. добавление картинок в массив происходит в img_dataset, а не в временный массив arr_6, который создаётся заново на каждой итерации.


# ---------------------------- Реализация 3 -   валидная, быстрая - БЕЗ АППЕНДА -----------------------------------------

arr_img_dataset_2 = np.empty([1000, 28, 28])
arr_img_dataset_2.resize([2000, 28, 28])
for i in range(1000):
    # имтируем получение картинки ПОСЛЕДОВАТЕЛЬНО
    img = np.random.randint(0, 255, 28 * 28).reshape([28, 28])  # формируется новая картинка 28х28
    arr_img_dataset_2[1000 + i] = img

print(img_dataset.shape)  # (2000, 28, 28)
# т.к. добавление картинок в массив происходит в img_dataset, а не в временный массив arr_6, который создаётся заново на каждой итерации.
