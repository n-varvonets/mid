# Пример использования осей в массиве NumPy
import numpy as np

# Создание трехмерного массива с пояснениями
arr_3d = np.array([
    [  # Ось 0, индекс 0 (Первая полка)
        ['a_1', 'b_1'],  # Ось 1, индекс 0 (Первая коробка на первой полке)
        ['c_1', 'd_1']  # Ось 1, индекс 1 (Вторая коробка на первой полке)
    ],
    [  # Ось 0, индекс 1 (Вторая полка)
        ['a_2', 'b_2'],  # Ось 1, индекс 0 (Первая коробка на второй полке)
        ['c_2', 'd_2']  # Ось 1, индекс 1 (Вторая коробка на второй полке)
    ],
    [  # Ось 0, индекс 2 (Третья полка)
        ['a_3', 'b_3'],  # Ось 1, индекс 0 (Первая коробка на третьей полке)
        ['c_3', 'd_3']  # Ось 1, индекс 1 (Вторая коробка на третьей полке)
    ]
])
# - Ось 0 представляет собой 3 большие группы, как 3 полки в шкафу.
# - Ось 1 представляет собой коробки на каждой полке, их по 2.
# - Ось 2 представляет собой объекты внутри коробок (шарики), их по 2 на каждую коробку.

# Вывод формы массива и самого массива
print("Форма массива:", arr_3d.shape)
print("Массив:")
print(arr_3d)
# Пояснение осей и их значений:
# arr_3d.shape вернет (3, 2, 2)
# Это означает, что массив имеет 3 оси с размерами:
# Ось 0 (полки) - 3 элемента: 3 больших блока (каждая полка в шкафу).
# Ось 1 (коробки) - 2 элемента: по 2 коробки на каждой полке.
# Ось 2 (шарики) - 2 элемента: по 2 элемента внутри каждой коробки.

# Более наглядное представление массива:
# Полка 1 (Ось 0, индекс 0):
#   Коробка 1 (Ось 1, индекс 0): [a_1, b_1] (Ось 2)
#   Коробка 2 (Ось 1, индекс 1): [c_1, d_1] (Ось 2)
# Полка 2 (Ось 0, индекс 1):
#   Коробка 1 (Ось 1, индекс 0): [a_2, b_2] (Ось 2)
#   Коробка 2 (Ось 1, индекс 1): [c_2, d_2] (Ось 2)
# Полка 3 (Ось 0, индекс 2):
#   Коробка 1 (Ось 1, индекс 0): [a_3, b_3] (Ось 2)
#   Коробка 2 (Ось 1, индекс 1): [c_3, d_3] (Ось 2)

# Каждая полка - это **ось 0**, у нас их 3.
# На каждой полке по 2 коробки - это **ось 1**.
# В каждой коробке 2 шарика - это **ось 2**.


arr_3d = np.array([
    [],
    [],
    []
])

# Ось 1 представляет собой коробки на каждой полке, их по 2.
arr_3d = np.array([
    [  #
        [],
        []
    ],
    [
        [],
        []
    ],
    [
        [],
        []
    ]
])
# Ось 0 представляет собой 3 большие группы, как 3 полки в шкафу. - ЄТО УЖЕ САМО КОЛ_ВО ЕЛЕМЕНТОВ в нижнем массиве - 2 элемента


###############################################
###### Разделение массивов .array_split #######
###############################################
arr_3d = np.array([
    [  # Ось 0, индекс 0
        ['a_1', 'b_1'],  # Ось 1, индекс 0
        ['c_1', 'd_1']  # Ось 1, индекс 1
    ],
    [  # Ось 0, индекс 1
        ['a_2', 'b_2'],  # Ось 1, индекс 0
        ['c_2', 'd_2']  # Ось 1, индекс 1
    ],
    [  # Ось 0, индекс 2
        ['a_3', 'b_3'],  # Ось 1, индекс 0
        ['c_3', 'd_3']  # Ось 1, индекс 1
    ]
])

# Пояснение о параметре indices_or_sections:
# Параметр `indices_or_sections` определяет, как мы делим массив на части.
# Он может быть целым числом, что означает количество частей, или списком индексов, указывающих точки разреза.
# Например, если мы указываем `3`, то массив будет разделен на 3 примерно равные части.
# Если же мы указываем список индексов, например `[1, 3]`, то разделение будет происходить в указанных позициях.

# Пример разделения массива вдоль оси 0 (строки)
# Разделим массив на 3 части по оси 0
arr_list = np.array_split(arr_3d, 3, axis=0)
print("\nРазделенный массив (по строкам, ось 0): это как разделить шкаф на отдельные полки.")
for i, part in enumerate(arr_list):
    print(f"Часть {i + 1}: Полка {i + 1}:")
    print(part)

# Вывод примера разделения вдоль оси 0:
# Часть 1 (Полка 1): содержит коробки [a_1, b_1] и [c_1, d_1]
# Часть 2 (Полка 2): содержит коробки [a_2, b_2] и [c_2, d_2]
# Часть 3 (Полка 3): содержит коробки [a_3, b_3] и [c_3, d_3]

# Пример разделения массива вдоль оси 1 (столбцы)
# Разделим массив на 2 части по оси 1
arr_list_axis1 = np.array_split(arr_3d, 2, axis=1)
print("\nРазделенный массив (по столбцам, ось 1): это разделить каждую полку на коробки.")
for i, part in enumerate(arr_list_axis1):
    print(f"Часть {i + 1}: Коробки на всех полках: {i + 1}")
    print(part)

# Вывод примера разделения вдоль оси 1:
# Часть 1: содержит первые коробки с каждой полки: [a_1, b_1], [a_2, b_2], [a_3, b_3]
# Часть 2: содержит вторые коробки с каждой полки: [c_1, d_1], [c_2, d_2], [c_3, d_3]

# Пример разделения массива вдоль оси 2
# Разделим массив на 2 части по оси 2
arr_list_axis2 = np.array_split(arr_3d, 2, axis=2)
print("\nРазделенный массив (по оси 2): это разделить каждую коробку на отдельные шарики.")
for i, part in enumerate(arr_list_axis2):
    print(f"Часть {i + 1}: Шарики в каждой коробке: {i + 1}")
    print(part)

# Вывод примера разделения вдоль оси 2:
# Часть 1: содержит первые элементы (шарики) в каждой коробке: a_1, c_1, a_2, c_2, a_3, c_3
# Часть 2: содержит вторые элементы (шарики) в каждой коробке: b_1, d_1, b_2, d_2, b_3, d_3
#
# Когда мы говорим о разделении вдоль какой-то оси, мы представляем, что разрезаем шкаф в этом направлении.
# Например, разделение по оси 0 - это как разделить шкаф на отдельные полки.
# Разделение по оси 1 - это разделить каждую полку на коробки.
# Разделение по оси 2 - это разделить каждую коробку на отдельные шарики.

# Важно понимать, что `indices_or_sections` влияет на конечное количество частей массива и их размеры.
# Если указать количество частей, как `3`, массив делится на 3 примерно равные части.
# Если же указать индексы, например `[1, 3]`, то массив будет разделен в точках 1 и 3 вдоль указанной оси.
# Это меняет не только количество частей, но и их размер и содержимое,
# что полезно при необходимости разделить массив в специфических местах.
