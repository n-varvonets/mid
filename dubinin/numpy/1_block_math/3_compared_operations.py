import numpy as np

# ==, !=, <, >, <=, >=

np.random.seed(42)  # гарантирует,
# что каждый раз, когда ты запускаешь код с этой строкой, последовательность случайных чисел будет одинаковой.
# ### Почему именно `42`? ты можешь использовать любое другое значение, например `3`,
# и это изменит последовательность случайных чисел. Главное, что при одном и том же значении seed,
# генератор всегда будет выдавать одну и ту же последовательность.

arr_1 = np.random.randint(10, size=[4, 3])  # до 10(невключительно, т.е. до 9ти включительно)
arr_2 = arr_1[[2, 1, 2, 0]]  # выполняет **индексирование по массиву** (так называемый **fancy indexing**),
# и позволяет извлечь строки из массива `arr_1` в порядке, указанном в списке индексов.
#   [[6 3 7]   # 0-я строка
#    [4 6 9]   # 1-я строка
#    [2 6 7]   # 2-я строка
#    [4 3 7]]  # 3-я строка

print(arr_1)
print(arr_2)
# [[6 3 7]
#  [4 6 9]
#  [2 6 7]
#  [4 3 7]]
# [[2 6 7]
#  [4 6 9]
#  [2 6 7]
#  [6 3 7]]

###########################################
###### операции сравнения с числами #######
###########################################

print(arr_1 == 4)  # будет сравниваться с каждым значением массива
# [[False False False]
#  [False False False]
#  [False False False]
#  [False False False]]
print(arr_1 <= 4)  # будет сравниваться с каждым значением массива
print(arr_1 > 4)  # будет сравниваться с каждым значением массива

#########################################################
###### операции сравнения с числами С ФИЛЬТРАЦИЕЙ #######
#########################################################

print(arr_1 > 4)
print(arr_1)
print(arr_1[arr_1 > 1])
# [[ True False  True]
#  [False  True  True]
#  [False  True  True]
#  [False False  True]]

# [[6 3 7]
#  [4 6 9]
#  [2 6 7]
#  [4 3 7]]

# [6 3 7 4 6 9 2 6 7 4 3 7]  # именно эти елементы где ТРУ - были взяты

##############################################################
###### операции сравнения с МАССИВАМИ одинаковой формы #######
##############################################################

print(arr_1 == arr_2)  # будет происходить по-елементно
# [[False False  True]
#  [ True  True  True]
#  [ True  True  True]
#  [False  True  True]]
print(arr_1 != arr_2)  # можно сравнивать по всем операциям (==, !=, <, >, <=, >=)

#################################################################
###### операции сравнения с МАССИВАМИ НЕ одинаковой формы #######
#################################################################

np.random.seed(2)
arr_shape_2_3_2 = np.random.randint(10, size=[2, 3, 2])
arr2_shape_3_2 = np.arange(2, 8).reshape([3, 2])

print(f"arr_shape_2_3_2=\n{arr_shape_2_3_2.shape}\n{arr_shape_2_3_2}")
print(f"arr2_shape_3_2=\n{arr2_shape_3_2.shape}\n{arr2_shape_3_2}")
# arr_shape_2_3_2=
# (2, 3, 2)
# [[[8 8]
#   [6 2]
#   [8 7]]
#
#  [[2 1]
#   [5 4]
#   [4 5]]]
# arr2_shape_3_2=
# (3, 2)
# [[2 3]
#  [4 5]
#  [6 7]]


# Можно поелементно сравнивать массив
print(arr2_shape_3_2 == [7, 3])
# [[False  True]
#  [False False]
#  [False False]]

#####################################
###### Функции для сравнения  #######
#####################################

print(np.greater(arr2_shape_3_2, [2, 3]))
# [[False False]
#  [ True  True]
#  [ True  True]]
print(np.greater_equal(arr2_shape_3_2, [2, 3]))
print(np.less(arr2_shape_3_2, [2, 3]))
print(np.less_equal(arr2_shape_3_2, [2, 3]))
print(np.equal(arr2_shape_3_2, [2, 3]))
print(np.not_equal(arr2_shape_3_2, [2, 3]))

print("--Пример несогдасованных массивов--")
print(arr_shape_2_3_2.shape, "\n", arr_shape_2_3_2)
# (2, 3, 2)
# [[[8 8]
#   [6 2]
#   [8 7]]
#
#  [[2 1]
#   [5 4]
#   [4 5]]]
print(arr2_shape_3_2.shape, "\n", arr2_shape_3_2)
# (3, 2)
# [[2 3]
#  [4 5]
#  [6 7]]
print(np.equal(arr_shape_2_3_2, arr2_shape_3_2))
# [[[False False]
#   [False False]
#   [False  True]]:  8==6. 7==7
#
#  [[ True False]  : 2==2, 1==3
#   [False False]
#   [False False]]]


###################################
###### Функции all and any  #######
###################################


arr = np.array([1, 2, 3, 4, 5])

print('---all---')
print(arr < 5)  # [ True  True  True  True False]
print(np.all(arr < 5))  # False - т.к. все либо тру, если кто-то один фолс, то будет False

print('---any---')
print(arr < 2)  # [ True False False False False]
print(np.any(arr < 5))  # True - хотя бы один тру, то будет True
