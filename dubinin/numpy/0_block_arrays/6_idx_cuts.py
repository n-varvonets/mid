import numpy as np

arr = np.array([1, 2, 3, 4, 5])
print(arr)
# array([1, 2, 3, 4, 5])


# 1.индексация с нуля, все как в пайтон
print(arr[3])
# 4

# 2.НЕРАВНОМЕРНЫЙ массив
arr = np.arange(18).reshape(3, 3, 2)
print(arr.shape, end='\n\n')
# (3, 3, 2)

print(arr)
# [[[ 0  1]
#   [ 2  3]
#   [ 4  5]]
#
#  [[ 6  7]
#   [ 8  9]
#   [10 11]]
#
#  [[12 13]
#   [14 15]
#   [16 17]]]

##############################################################
###### ПОЛУЧИТЬ конкретный МАССИВ (ОДИН елемент сразу) #######
##############################################################


# 2.1.что сделать что б получить первый еелмент?
# [[ 0  1]
#  [ 2  3]
#  [ 4  5]]
print(arr[0])  # т.к. это трехмерный массив (a[0], a[1], a[2]), то получаю первый елемент
# [[0 1]
#  [2 3]
#  [4 5]]

# 2.2. НЕОДНОМЕРНЫЙ МАССИВ: что сделать что б получить ПЕРВЫЙ елмент В ПОСЛЕДНЕМ массиве?
# [12 13]
print(arr[2, 0])  # ТО НУЖНО УКАЗАТЬ ЕГО ИНДЕКС по 0 оси и по первой
# [12 13]


# 2.3. НЕОДНОМЕРНЫЙ МАССИВ: взять конкретный елемент
print(arr[2, 2, 0])
# 16

# 3.1. Изменять елмент на оси, т.е. набор значений(массив [10 11] на [100 101])
print(f"arr[1, 2] before\n {arr[1, 2]}")
arr[1, 2] = [100, 101]
print(f"arr[1, 2] after\n {arr[1, 2]}")
# arr[1, 2] before
#  [10 11]
# arr[1, 2] after
#  [100 101]
# 3.2. Изменять КОНКРУТНЫЙ елмент
arr[1, 2, 0] = 7
print(f"arr[1, 2] after chang SPECIFIC ONE\n {arr[1, 2]}")
# arr[1, 2] after chang SPECIFIC ONE
#  [  7 101]

###############################################################
###### ПОЛУЧИТЬ СРЕЗ МАССИВА(несколько елементов сразу) #######
###############################################################
print("ПОЛУЧИТЬ СРЕЗ МАССИВА")
arr = np.arange(4 * 3 * 2).reshape(
    [4, 3, 2])  # первая строка создаёт массив из 24 последовательных чисел и изменяет его форму на (4, 3, 2)
# [[[ 0  1]
#   [ 2  3]
#   [ 4  5]]
#
#  [[ 6  7]
#   [ 8  9]
#   [10 11]]
#
#  [[12 13]
#   [14 15]
#   [16 17]]
#
#  [[18 19]
#   [20 21]
#   [22 23]]]
# arr1 = np.array([4, 3, 2])  # [4 3 2]

# 4.1. частичный срез елемнтов по оси
print(arr[0:2, 2])  # !!!!!! 0:2 - 2ка НЕ ВКЛЮЧИТЕЛЬНО
# [[ 4  5]
#  [10 11]]
# 4.2. ПОЛНЫЙ срез елемнтов по оси
print(arr[:, 1])
# [[ 2  3]
#  [ 8  9]
#  [14 15]
#  [20 21]]
# 4.3. частичный срез елемнтов. По 0 оси 1:(с первого и по конец), по 1 оси - все елементы, и по 2ой оси только второй еемент
print(arr[1:, :, 1])
# [[ 7  9 11]
#  [13 15 17]
#  [19 21 23]]
# 4.4. СРЕЗ с ШАГОМ 2
print(arr[::2, 1])
# [[ 2  3]
#  [14 15]]

###################################
###### СПИСОЧНАЯ ИНДЕКСАЦИЯ #######
###################################
# СПИСОЧНАЯ ИНДЕКСАЦИЯ - можно получить любую выборку из УЖЕ СЩЕСТВУЮЩЕГО массива

# 5.1. !!! здесь прокидуются индексы, а не значения
print(arr[np.array([1, 3, 1])])  # полуили 3 елемента из ранее СУЩЕСТВУЩЕГО массива arr - создав свою выборку
# [[[ 6  7]
#   [ 8  9]
#   [10 11]]
#
#  [[18 19]
#   [20 21]
#   [22 23]]
#
#  [[ 6  7]
#   [ 8  9]
#   [10 11]]]

# 5.2. !!! здесь прокидуются БУЛИАН по индексам, например arr = np.arange(4 * 3 * 2).reshape([4, 3, 2])
bool_arr = arr[[True, False, False, True]]  # т.к. на наулевой оси 4 елемента, то 4 раза нужно указать
print(bool_arr)  # принутуло 0 и 3 елемент
# [[[ 0  1]
#   [ 2  3]
#   [ 4  5]]
#
#  [[18 19]
#   [20 21]
#   [22 23]]]
